import argparse
import sys
import socket
from datetime import datetime
from scannerClass import Scanner
from scannerClass import Scripts

###################################################### Args ##############################################""
parser = argparse.ArgumentParser(description='Process some arguments.')
parser.add_argument('host', type=str, help='specify the IP')
parser.add_argument('-p', '--port', type=str, help='specify the port or range of ports 10-1000')
parser.add_argument('-p-', '--pall', nargs='?', const='', type=str, help='scan all ports')
parser.add_argument('--topPorts', type=str, help='scan the famous ports "--topPorts 1000"')
parser.add_argument('-v', '--version', nargs='?', const='', type=str, help='get version of running services on open ports')
parser.add_argument('-sc', '--scripts', nargs='?', const='', type=str, help='run cracking scripts')
args = parser.parse_args()


################################################  COLORS  #############################################################
# Text colors
def print_red(string):
    print("\033[91m" + string + "\033[0m")
def print_green(string):
    print("\033[92m" + string + "\033[0m")
def print_yellow(string):
    print("\033[93m" + string + "\033[0m")
def print_blue(string):
    print("\033[94m" + string + "\033[0m")
def print_magenta(string):
    print("\033[95m" + string + "\033[0m")
def print_cyan(string):
    print("\033[96m" + string + "\033[0m")
# Text with background colors
def print_red_bg(string):
    print("\033[30;41m" + "Black text on red background" + "\033[0m")
def print_green_bg(string):
    print("\033[30;42m" + "Black text on green background" + "\033[0m")
def print_yellow_bg(string):
    print("\033[30;43m" + "Black text on yellow background" + "\033[0m")
def print_blue_bg(string):
    print("\033[30;44m" + "Black text on blue background" + "\033[0m")
def print_magenta_bg(string):
    print("\033[30;45m" + "Black text on magenta background" + "\033[0m")
def print_cyan_bg(string):
    print("\033[30;46m" + "Black text on cyan background" + "\033[0m")

try:
    target = socket.gethostbyname(args.host)
except:
    print_red("Network is unreachable")
    sys.exit()
############################################### Decorator ############################################################
def logger(func):
    def wrapper(*args, **kwargs):
        print_blue("-" * 50)
        print_blue("> Execution started {}".format(datetime.today().strftime("%Y-%m-%d %H:%M:%S")))
        print_blue("-" * 50)
        func(*args, **kwargs)
        print_blue("-" * 50)
        print_blue("< Execution completed {}".format(datetime.today().strftime("%Y-%m-%d %H:%M:%S")))
        print_blue("-" * 50)
    return wrapper

# banner
def displayBanner():
    print_green("[*] Scanning target: {}".format(target))

def parseServiceInfo(banner):
    if not banner:
        return "No response or unknown service"
    if "Server:" in banner:
        service_info = banner.split("Server:")[1].strip().split()[0]
    elif "220" in banner or "SSH" in banner:
        service_info = banner.strip().split()[0]
    else:
        service_info = banner.strip()
    return service_info

def getServiceName(port):
    try:
        service_name = socket.getservbyport(port)
    except OSError:
        service_name = "unknown"
    return service_name

def display(openPorts, openPortsVersion, creds=None):
    displayBanner()
    if openPortsVersion is None:
        openPortsVersion = [" "] * len(openPorts)
    if len(openPorts) == 0:
        print_red("No open ports found.")
        sys.exit()

    print("_" * 105)
    print("|   PORT   |   STAT   |           SERVICE          |                       VERSION                      |")
    print("|" + "-" * 10 + "|" + "-" * 10 + "|" + "-" * 28 + "|" + "-" * 52 + "|")
    for i in range(len(openPorts)):
        port = openPorts[i]
        disPort = str(port).ljust(5)
        serviceName = getServiceName(port).ljust(25)
        portVersion = str(openPortsVersion[i]).ljust(51)
        print("|   {}  |   OPEN   | {}  | {}|".format(disPort, serviceName, portVersion))
        print("|" + "-" * 10 + "|" + "-" * 10 + "|" + "-" * 28 + "|" + "-" * 52 + "|")
    
    if creds:
        print_magenta("[X] Cracked Credentials:")
        print_cyan("\t[*] SSH : ")
        if len(creds[1]) >0:
            for cred in creds:
                print("\t\tuser: \033[92m {} \033[0m\t , password: \033[92m {} \033[0m".format(cred[0],cred[1]))
        else:
            print_red("\t\tNothing found")
        print_cyan("\t[*] FTP : ")
        if len(creds[0]) >0:
            for cred in creds[0]:
                print("\t\tuser: \033[92m {} \033[0m\t , password: \033[92m {} \033[0m".format(cred[0],cred[1]))
        else:
            print_red("\t\tNothing found")

####################################################### main function ##########################################################
@logger
def main(target, args):
    openPorts = []
    if args.pall == "":
        pList = Scanner.scanPorts(1, 65535, target)
        openPorts.extend(pList)
    elif args.port:
        interval = args.port.split("-")
        if len(interval) == 1:
            pList = Scanner.scanPorts(int(interval[0]), int(interval[0]), target)
            openPorts.extend(pList)
        elif len(interval) == 2:
            x, y = sorted(map(int, interval))
            pList = Scanner.scanPorts(x, y, target)
            openPorts.extend(pList)
        else:
            print_red("Syntax error")
    elif args.topPorts:
        top = int(args.topPorts)
        top = min(top, 5000)
        with open('top5000ports.txt', "r") as ports:
            for counter, port in enumerate(ports, 1):
                if counter <= top:
                    pList = Scanner.scanPorts(int(port.strip()), int(port.strip()), target)
                    openPorts.extend(pList)
                else:
                    break

    openPortsVersion = []
    if args.version == "":
        for port in openPorts:
            answer = Scanner.scanVersion(target, port)
            if answer:
                versionInfo = parseServiceInfo(answer)
                openPortsVersion.append(versionInfo)
            else:
                openPortsVersion.append("unknown")
    else:
        openPortsVersion = None

    creds = []
    if args.scripts == "":
        ftpCred = Scripts.crackFTP(target)
        sshCred = Scripts.crackSSH(target)
        creds.extend([ftpCred, sshCred])

    display(openPorts, openPortsVersion, creds)

if __name__ == "__main__":
    main(target, args)
